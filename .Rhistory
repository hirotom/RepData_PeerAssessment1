View(gdp)
View(gdp)
gdp[1,2]
gdp[1,3]
names(gdp)
gdp[1,1]
gdp[1,w]
gdp[1,2]
drop.levels(gdp)
levels(droplevels(gdp))
dgp=levels(droplevels(gdp))
View(gdp)
View(gdp)
gdp[1,1]
gdp[1,2]
as.numeric(gdp[1,2])
dgp=droplevels(gdp))
dgp=droplevels(gdp)
View(gdp)
View(gdp)
dgp[1,1]
dgp[1,2]
dgp<-droplevels(gdp)
dgp[1,2]
gdp = read.csv("getdata-data-GDP.csv")
dgp[1,2]
as.numeric(gdp[1,2])
gdp = gdp[5:194,]
dgp[1,2]
as.numeric(gdp[1,2])
gdp = read.csv("getdata-data-GDP.csv")
View(gdp)
gdp[5,2]
as.numeric(gdp[1,2])
as.numeric(gdp[5,2])
str(gdp)
gdp = read.csv("getdata-data-GDP.csv")
gdp = gdp[5:194,]
View(gdp)
View(gdp)
str(gdp)
dgp<-droplevels(gdp)
str(gdp)
?droplevels
class(gdp)
class(gdp$Gross.domestic.product.2012)
typeof(gdp$Gross.domestic.product.2012)
gdp[1,3]
View(gdp)
View(gdp)
gdp[1,3]
gdp[1,1]
gdp[1,2]
gdp[1,2]+gdp[2,2]
gdp = read.csv("getdata-data-GDP.csv", as.is=TRUE)
str(gdp)
gdp = gdp[5:194,]
str(gdp)
as.numeric(gdp[1,2])
View(gdp)
as.numeric(gdp[1,1])
gdp = read.csv("getdata-data-GDP.csv", as.is=TRUE)
gdp = gdp[5:194,]
fileUrl  = "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FEDSTATS_Country.csv"
download.file(fileUrl, destfile ="getdata-data-EDSTATS_Country.csv")
edu = read.csv("getdata-data-EDSTATS_Country.csv", as.is=TRUE)
# merge two data sets
merged = merge(gdp, edu, by.x="X", by.y="CountryCode", all=TRUE)
# change 2nd column to numeric from character type
merged = transform(merged, Gross.domestic.product.2012 = as.numeric(Gross.domestic.product.2012) )
# sort
merged = merged[order(merged$Gross.domestic.product.2012, na.last=TRUE, decreasing=TRUE),]
View(merged)
View(merged)
match(gdp$X, edu$CountryCode, nomatch=0)
match(gdp$X, edu$CountryCode)
sum(!is.na(match(gdp$X, edu$CountryCode))
)
View(gdp)
View(edu)
View(merged)
merged[merged$Income.Group=="High income: OECD" ]
merged[merged$Income.Group=="High income: OECD",]
HI.OECD=merged[merged$Income.Group=="High income: OECD",]
HI.nonOECD=merged[merged$Income.Group=="High income: nonOECD",]
View(HI.OECD)
View(HI.OECD)
View(HI.nonOECD)
View(HI.nonOECD)
mean(HI.OECD$Gross.domestics.product.2012, na.rm=TRUE)
mean(HI.OECD$Gross.domestic.product.2012, na.rm=TRUE)
HI.OECD=merged[merged$Income.Group=="High income: OECD",]
HI.nonOECD=merged[merged$Income.Group=="High income: nonOECD",]
# calculate means
mean(HI.OECD$Gross.domestic.product.2012, na.rm=TRUE)
mean(HI.nonOECD$Gross.domestic.product.2012, na.rm=TRUE)
quantile(merged$Gross.domestic.product.2012)
quantile(merged$Gross.domestic.product.2012, na.rm=TRUE)
cut(merged$Income.Group, breaks=quantile(merged$Gross.domestic.product.2012, na.rm=TRUE))
str(merged)
merged$Income.Group = factor(merged$Income.Group)
str(merged)
cut(merged$Income.Group, breaks=quantile(merged$Gross.domestic.product.2012, na.rm=TRUE))
install.packages("Hmisc")
library(Hmisc)
library(Hmisc)
install.packages("Hmisc")
cut(merged$Income.Group,3)
cut(merged$Income.Group)
as.numeric(merged$Income.Group)
cut(as.numeric(merged$Income.Group))
cut(as.numeric(merged$Income.Group),3)
summary(merged)
cut(merged$Gross.domestic.product.2012,3)
cut(merged$Gross.domestic.product.2012,5)
cut(merged$Income.Group, breaks=quantile(merged$Gross.domestic.product.2012, na.rm=TRUE))
cut(merged$Gross.domestic.product.2012, breaks=quantile(merged$Gross.domestic.product.2012, na.rm=TRUE))
str(merged)
source('~/week3.R')
source('~/week3.R')
HI.OECD=merged[merged$Income.Group=="High income: OECD",]
HI.nonOECD=merged[merged$Income.Group=="High income: nonOECD",]
HI.OECD=merged[merged$Income.Group=="High income: OECD",]
mean(HI.nonOECD$Gross.domestic.product.2012, na.rm=TRUE)
cut(merged$Gross.domestic.product.2012, breaks=quantile(merged$Gross.domestic.product.2012, na.rm=TRUE))
cut(merged$Gross.domestic.product.2012, breaks=1
)
cut(merged$Gross.domestic.product.2012, breaks=2)
cut(merged$Gross.domestic.product.2012, breaks=2, na.rm=TRUE)
data(mtcars)
str(mtcars)
table(mtcars$gear, mtcars$am)
ifelse(merged[merged$Gross.domestic.product.2012]>=38,TRUE,FALSE)
ifelse(merged$Gross.domestic.product.2012>=38,TRUE,FALSE)
ifelse(merged$Gross.domestic.product.2012<=38,TRUE,FALSE)
merged = cbind(merged, ifelse(merged$Gross.domestic.product.2012<=38,TRUE,FALSE))
str(merged)
merged = merge(gdp, edu, by.x="X", by.y="CountryCode", all=TRUE)
merged = transform(merged, Gross.domestic.product.2012 = as.numeric(Gross.domestic.product.2012) )
merged = merged[order(merged$Gross.domestic.product.2012, na.last=TRUE, decreasing=TRUE),]
merged = cbind(merged, ifelse(merged$Gross.domestic.product.2012<=38,TRUE,FALSE))
top38 = ifelse(merged$Gross.domestic.product.2012<=38,TRUE,FALSE)
merged = cbind(merged, top38)
str(merged)
table(merged$Income.Group, merged$top38)
source('~/week3.R')
merged = cbind(merged, top38)
table(merged$Income.Group, merged$top38)
source('~/week3.R')
source('~/week3.R')
table(merged$Income.Group, merged$top38)
test = read.txt("X_test.txt")
test = read.table("X_test.txt")
View(test)
View(test)
test = read.table("X_test.txt")
View(test)
View(test)
View(test)
source('~/run_analysis.R')
View(Y_test.data)
View(test)
View(test)
source('~/run_analysis.R')
source('~/run_analysis.R')
View(activity_labels.data)
View(activity_labels.data)
View(features.data)
View(features.data)
source('~/run_analysis.R')
View(subject_test.data)
View(subject_test.data)
View(subject_test.data)
rownames(X_test.data)
colnames(X_test.data)
View(Y_test.data)
View(Y_test.data)
source('~/run_analysis.R')
View(X_test.data)
View(X_test.data)
View(features.data)
View(subject_test.data)
View(activity_labels.data)
View(Y_test.data)
View(X_test.data)
View(features.data)
colnames(X_test.data) = features.data[,2]
View(X_test.data)
View(Y_test.data)
source('~/run_analysis.R')
test.data = cbind(Y_test.data, subject_test.data, X_test.data)
View(test.data)
source('~/run_analysis.R')
View(test.data)
source('~/run_analysis.R')
source('~/run_analysis.R')
source('~/run_analysis.R')
View(features.data)
source('~/run_analysis.R')
View(test.data)
View(activity_labels.data)
View(activity_labels.data)
X_test.data = read.table("X_test.txt")
Y_test.data = read.table("Y_test.txt")
subject_test.data = read.table("subject_test.txt")
View(Y_test.data)
merge(Y_Test.data,activity_labels.data, by.x="V1", by.y="V1",all=TRUE)
merge(Y_test.data,activity_labels.data, by.x="V1", by.y="V1",all=TRUE)
source('~/run_analysis.R')
source('~/run_analysis.R')
View(merged.data)
View(merged.data)
View(merged.data)
colnames(merged.data)
source('~/run_analysis.R')
View(merged.subset)
rep("test",10)
t(rep"test",10)
t(rep("test",10))
t(t(rep("test",10))
)
X_test.data = read.table("X_test.txt")
Y_test.data = read.table("Y_test.txt")
subject_test.data = read.table("subject_test.txt")
# tag X_test.data as test data
tag_as_test = rep("test",nrows(X_test.data))
nrow(X_test.data)
source.data = matrix(rep("test",nrow(X_test.data)),nrow(X_test.data),1)
View(source.data)
colnames(source.data)="source"
View(source.data)
source('~/run_analysis.R')
View(merged.subset)
View(merged.subset)
source('~/run_analysis.R')
View(test.data)
View(source.data)
View(test.data[,565])
View(test.data[,560:565])
View(train.data[,560:565])
View(marged.data[,560:565])
View(merged.data[,560:565])
View(merged.data[2940:3000,560:565])
summary(merged.subset)
str(merged.subset)
aggregate(. ~ activity_name, merged.subset, mean)
aggregate(. ~ activity_name+subject_id, merged.subset, mean)
merged.tidy = aggregate(. ~ activity_name+subject_id, merged.subset, mean)
View(merged.tidy)
View(merged.tidy)
source('~/run_analysis.R')
View(merged.tidy)
source('~/run_analysis.R')
View(merged.tidy)
view(merged.tidy[order(merged.tidy$activity_name, merged.tidy$subject_id),]
view(merged.tidy[order(merged.tidy$activity_name, merged.tidy$subject_id),]
view(merged.tidy[order(merged.tidy$activity_name, merged.tidy$subject_id),])
View(merged.tidy[order(merged.tidy$activity_name, merged.tidy$subject_id),])
View(merged.tidy)
View(merged.subset)
source('~/run_analysis.R')
View(merged.tidy)
str(merged.tidy)
write.table(merged.tidy, file="merged.tidy.txt", row.name=FALSE)
source('~/run_analysis.R')
source('~/run_analysis.R')
source('~/run_analysis.R')
source('~/run_analysis.R')
source('~/run_analysis.R')
View(merged.tidy)
View(merged.tidy)
str(merged.tidy)
fileUrl  <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv"
download.file(fileUrl, destfile ="getdata-data-ss06hid.csv")
housing <- read.csv("getdata-data-ss06hid.csv")
View(housing)
View(housing)
names(housing)
strsplit(names(housing),"[A-Za-z].[0-9]")
strsplit(names(housing),"[Aa-Zz].[0-9]")
strsplit(names(housing),"[A-Za-Z].[0-9]")
strsplit(names(housing),"[A-Za-z].[0-9]")
strsplit(names(housing),"[A-Za-z]*[0-9]")
strsplit(names(housing),"[A-Za-z].*[0-9]")
strsplit(names(housing),"[A-Za-z].[0-9]")
strsplit(names(housing),"[A-Za-z*].[0-9]")
strsplit(names(housing),"[A-Za-z*]+(.*)+[0-9]")
strsplit(names(housing),"[A-Za-z*](.*)[0-9]")
strsplit(names(housing),"[A-Za-z][0-9]")
strsplit(names(housing),"[A-Za-z.*][0-9]")
strsplit(names(housing),"[A-Za-z.*][0-9.*]")
strsplit(names(housing),"[A-Za-z.*][0-9*]")
strsplit(names(housing),"[A-Za-z*][0-9*]")
strsplit(names(housing),"[a-z*][0-9*]")
strsplit(names(housing),"[a-z.*][0-9*]")
strsplit(names(housing),"[a-z*][0-9*]")
strsplit(names(housing),"[a-z*].[0-9*]")
strsplit(names(housing),"[a-z*][0-9*]")
housing_label = names(housing)
housing_label
strsplit(housing_label,"wgtp")
strsplit(housing_label[123],"wgtp")
strsplit(names(housing_label)[123],"wgtp")
strsplit(names(housing)[123],"wgtp")
fileUrl  <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv"
download.file(fileUrl, destfile ="getdata-data-FGDP.csv")
FGDP <- read.csv("getdata-data-FGDP.csv")
View(FGDP)
FGDP$X.3
FGDP$X.3[10]
nrow(FGDP$X.3)
nrows(FGDP$X.3)
nrows(FGDP)
nrow(FGDP)
View(FGDP)
GDP = FGDP$X.3[5:194]
GDP
gsub(",", "", GDP)
mean(GDP)
mean(as.numeric(GDP))
mean(as.numeric(gsub(",", "", GDP)))
View(housing)
View(FGDP)
countryNames = FGDP$X.2
grep("^United", countryNames)
grep("*United", countryNames)
grep("^United", countryNames)
fileUrl  <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FEDSTATS_Country.csv"
download.file(fileUrl, destfile ="getdata-data-FEDSTATS_Country.csv")
FEDSTATS = read.csv("getdata-data-FEDSTATS_Country.csv")
View(FEDSTATS)
View(FGDP)
merged = merge(FEDSTATS, GDP, by.x="CountryCode", by.y="X", all=TRUE)
View(FEDSTATS)
merged = merge(FEDSTATS, FGDP, by.x="CountryCode", by.y="X", all=TRUE)
View(merged)
grepl(merged$Special.Notes,"^Fiscal year end: June")
grepl(merged$Special.Notes[11],"^Fiscal year end: June")
merged$Special.Notes[11]
grepl(merged$Special.Notes[11],"^Fiscal year end: June")
grepl(merged$Special.Notes[11],"^Fiscal year end")
grepl("^Fiscal year end: June",merged$Special.Notes[11])
grepl("^Fiscal year end: June",merged$Special.Notes)
summary(grepl("^Fiscal year end: June",merged$Special.Notes))
library(quantmod)
amzn = getSymbols("AMZN",auto.assign=FALSE)
sampleTimes = index(amzn)
install.packages("quantmod")
library(quantmod)
amzn = getSymbols("AMZN",auto.assign=FALSE)
sampleTimes = index(amzn)
sampleTimes
summary(grepl("^2012-",sampleTimes))
SampleWeeks = weekdays(as.Date(SampleTimes))
SampleWeeks = weekdays(as.Date(sampleTimes))
summary(grepl("^Monday",SampleWeeks))
sampleTimes = cbind(sampleTimes, weekdays(as.Date(sampleTimes)))
View(sampleTimes)
sampleTimes = index(amzn)
sampleTimes = cbind(toString(sampleTimes), weekdays(as.Date(sampleTimes)))
View(sampleTimes)
View(sampleTimes)
sampleTimes = index(amzn)
sampleTimes = cbind(as.character(sampleTimes), weekdays(as.Date(sampleTimes)))
View(merged)
View(sampleTimes)
2012Mondays = cbind((grepl("^2012-",sampleTimes[,1])),grepl("^Monday",sampleTimes[,2])
MondaysIn2012 = cbind((grepl("^2012-",sampleTimes[,1])),grepl("^Monday",sampleTimes[,2])
View(sampleTimes)
MondaysIn2012 = cbind((grepl("^2012-",sampleTimes[,1])),grepl("^Monday",sampleTimes[,2]))
View(MondaysIn2012)
summary(MOndaysIn2012)
summary(MondaysIn2012)
x=(grepl("^2012-",sampleTimes[,1])) & grepl("^Monday",sampleTimes[,2]))
x=((grepl("^2012-",sampleTimes[,1])) & grepl("^Monday",sampleTimes[,2])))
x=((grepl("^2012-",sampleTimes[,1])) & grepl("^Monday",sampleTimes[,2]))
x
summary x
summary(x)
In2012 = (grepl("^2012-",sampleTimes[,1]))
summary(In2012)
MondaysIn2012 = ((grepl("^2012-",sampleTimes[,1])) & grepl("^Monday",sampleTimes[,2]))
summary(MondaysIn2012)
library(ggplot2)
install.packages("ggplot2")
library(ggplot2)
votes
qplot(votes, ratings, data=movies)
qplot(votes, rating, data=movies)
qplot(votes, rating, data=movies, smooth="loess")
qplot(votes, rating, data = movies) + geom_smooth()
qplot(votes, rating, data = movies, panel = panel.loess)
qplot(votes, rating, data = movies) + stats_smooth("loess")
qplot(votes, rating, data = movies, smooth = "loess")
qplot(votes, rating, data = movies) + geom_smooth()
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight)
library(datasets)
data(airquality)
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
qplot(Wind, Ozone, data = airquality)
qplot(Wind, Ozone, data = airquality, geom = "smooth")
library(ggplot2)
g <- ggplot(movies, aes(votes, rating))
print(g)
g <- g+ geom()
setwd("./RepData_PeerAssignmen1")
source('~/.active-rstudio-document')
dt2 <- unname(dt1)
dt2 <- unname(dt)
View(dt2)
View(dt2)
dt2 <- unname(unlist(dt)
)
dt2 <- unname(dt)
View(dt2)
colnames(dt2) <- c("1","2")
View(dt2)
dt2 <- unname(dt.pattern)
colnames(dt2) <- c("1","2")
str(dt2)
View(dt.pattern)
rownames(dt.pattern)
row.names(dt.pattern)
rownames(dt.pattern) <- NULL
View(dt.pattern)
```{r}
df2 <- df
for (i in 1:nrow(dt2)) {
if is.na(df2$steps[i]) {
df2$steps[i] <- df.pattern$steps(which(row.names(df.pattern) == df2$interval[i]))
}
}
df2 <- df
for (i in 1:nrow(dt2)) {
if is.na(df2$steps[i]) {
df2$steps[i] <- df.pattern$steps(which(row.names(df.pattern) == df2$interval[i]))
}
}
df2 <- df
for (i in 1:nrow(dt2)) {
if is.na(df2$steps[i]) {
df2$steps[i] <- df.pattern$steps(which(row.names(df.pattern) == df2$interval[i]))
}
}
source('~/.active-rstudio-document')
df2 <- df
for (i in 1:nrow(df2)) {
if is.na(df2$steps[i]) {
df2$steps[i] <- df.pattern$steps(which(row.names(df.pattern) == df2$interval[i]))
}
}
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/RepData_PeerAssignmen1/PA1.R')
is.na(df2$steps[1])
nrow(df2)
df.pattern$steps(which(row.names(df.pattern) == df2$interval[1]))
df.pattern$steps(which(row.names(df.pattern) == df2$interval[1,]))
df2$interval[1]
df2$interval[2]
df2$interval[3]
which(row.names(df.pattern)==0)
which(row.names(df.pattern)==5)
which(row.names(df.pattern)==10)
which(row.names(df.pattern)==11)
which(row.names(df.pattern)==10)
df2$interval[1]
df2$interval[2]
which(row.names(df.pattern)==df2$interval[2])
source('~/.active-rstudio-document')
View(df2)
df2.hist <- data.frame(tapply(df2$steps, df2$date, FUN=sum, na.rm=TRUE))
colnames(df2.hist) <- "steps"
View(df2.hist)
View(df2.hist)
df2.hist <- data.frame(tapply(df2$steps, df2$date, FUN=sum, na.rm=FALSE))
colnames(df2.hist) <- "steps"
hist(df2.hist$steps,
main="Histogram of total number of steps taken each day",
xlab="Number of steps taken each day",
col="green"
)
View(df2.hist)
View(df.hist)
View(df)
sum(df.pattern$steps)
View(df.pattern)
View(df.hist)
View(df.hist)
View(df2.hist)
median(df2.hist$steps)
mean(df2.hist$steps)
mean(df.hist$steps)
median(df.hist$steps)
cat("Mean: ", mean(df2.hist$steps), "\n",
"Median: ", median(df2.hist$steps), sep="")
df2.mean <- mean(df2.hist$steps)
df2.median <- median(df2.hist$steps)
cat("Mean: ", df2.mean, "\n",
"Median: ", df2.median, sep="")
getwd()
df2.mean <- mean(df2.hist$steps)
df2.median <- median(df2.hist$steps)
cat("Mean: ", df2.mean, "\n",
"Median: ", df2.median, sep="")
cat("Mean: ", mean(df2.hist$steps, na.rm=TRUE), "\n",
"Median: ", as.character(median(df2.hist$steps)))
